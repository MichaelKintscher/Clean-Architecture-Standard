<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <RootNamespace>CleanArchitecture.Core</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <PackageId>kintscher.dev.$(RootNamespace)</PackageId>
    <Title>Clean Architecture Core</Title>
    <Description>A set of cross-plaform classes to implement Clean Architecture.</Description>
    <PackageProjectUrl>https://github.com/MichaelKintscher/Clean-Architecture-Standard</PackageProjectUrl>
    <RepositoryUrl>https://github.com/MichaelKintscher/Clean-Architecture-Standard</RepositoryUrl>
    <Authors>Michael Kintscher</Authors>
    <PackageLicenseExpression>AGPL-3.0-or-later</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <Copyright>Copyright 2023 - Michael Kintscher</Copyright>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <VersionPrefix>1.0.7</VersionPrefix>
    <PackageReleaseNotes>Fixed bug from 1.0.6 where the OAuthResponseReceived event was internal instead of public.
    
From 1.0.6: Added support for loopback IP addresses to the OAuthApi base class.

To use this, call StartOAuthListener to initiate a listener on the loopback IP address (which your inheriting class should provide into the base class through the constructor as the OAuth Redirect URI). Do this prior to presenting the UI and/or redirecting the user to the OAuth endpoint, as the user's actions there will trigger the response that needs to be listened for.

The OAuthApi base class will raise the OAuthResponseReceived event when the listener receives a response from the OAuth endpoint (including an OAuth code), and then immediately proceed to exchange the code for a token at the OAuth token endpoint. The OAuth Api base class will raise the Authorized event when a token has been received.

After the Authorized event is raised, the GetToken and GetCachedTokenData methods will both return cached token data including the newly authorized account. At this point calls can now be made to the API with the authorized account ID.

Note that the OAuthApi class does not support persistance on its own; the token data will need to be retrieved using GetCachedTokenData and then saved locally if it is to persist between user sessions.

Optionally, call CancelOAuthListener to stop the listener on the loopback IP address if, for example, the user cancels the authorization part-way through.</PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="docs\readme.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

</Project>
